#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
//Função para descobrir o MDC
long long int mdc( long long int a, long long int b)
{
	long long int resto;
     //MDC feito como algoritmo de Euclides
	while(a % b != 0)
	{
		resto = a;
		a = b;
		b = resto % a;
	}
	return b;
}
//Aplica o Teorema do Resto
long long int teoremadoresto(long long int m, long long int n, long long int e)
{
	long long int contador, resto = 1;
	for(contador = 1; contador <= e; contador++)
	{
		resto = (resto * m % n) % n;
	}
	return resto;
}
//Função para verificar se é primo
long long primo(long long int p,long long int *pont)
{
	int i, e_primo = 1;
	long long int raiz; 
	raiz = sqrt(p);
	if(p == 1)
	{
	    e_primo = 0;
	}
    if(p == 0)
     {
        e_primo = 0;
     }
	for(i = 2 ;i <= raiz; i++)
	{
		if(p % i == 0)
		{
		    e_primo = 0;
		}
	}
	if(e_primo == 0)
	{
		printf("O número: %lld, não é primo redigite-o:", p);
		scanf("%lld", pont);
		p = *pont;
		primo(p, pont);
	}
}
//Função para calcular o inverso modular
long long int inversoMod(long long int a, long long int b)
{
    long long int quociente[100000], valor[100000], contador = 0, auxiliar1 = 0, auxiliar2 = 0, resto = 0, d = 0, phi = 0;
    phi = a;
	//While para salvar os quocientes 
    while(b != 0)
    {
        quociente[contador] = a/b;
        contador++;
        resto = a % b;
        a = b;
        b = resto;
    }
    valor[0] = 1;
	//Ciclo de repetição para salvar os valores do MDC
    for (auxiliar2 = contador - 2; auxiliar2 >= 0; auxiliar2--)
    {
        if(auxiliar1 == 0)
        {
            valor[auxiliar1 + 1] = quociente[auxiliar2] * valor[auxiliar1];
        }
        else
        {
            valor[auxiliar1 + 1] = (quociente[auxiliar2] * valor[auxiliar1]) + valor[auxiliar1 -1];
        }
		auxiliar1++;
    }
	//Após isso, encontramos d
    if (auxiliar1 % 2 == 0)
    {
        d = valor[auxiliar1];
        return d;
    }
    else
    {
        d = -valor[auxiliar1];
        while(1)
        {
            d = d + phi;
            if (d >= 0)
            {
                break;
            }
        }
        return d;
    }
}
//Função para verificar se os números digitados eram iguais
long long igual(long long int*a, long long int*b)
{
	printf("Os números não podem ser iguais redigite-os:");
	scanf("%lld %lld", a, b);
    //Após obter os novos números, verifica se são primos
	primo(*a, a);
	primo(*b, b);
	if(*a == *b)
	{
		igual(a,b);
	}
}
//Função para verificar se "e" é relativamente primo a "p" * "q"(p multiplicando q)
long long verificar(long long int e, long long int p, long long int q,long long int *pont)
{
	long long int auxiliar;
	p = p - 1;
	q = q - 1;
	auxiliar = p * q;
	if(mdc(e, auxiliar) != 1)
	{
		printf("O  numero %lld, nao é relativamente primo a (p - 1)(q -1), redigite-o:", e);
		scanf("%lld", pont);
		e = *pont;
		verificar(e, p, q, pont);
	}
}
//Função para converter o texto em números
void converte(char frase[],long long int *ponteiro)
{
	//Foi utilizado ponteiros para a mudança ocorrer no array original
	int contador, auxiliar;
	contador = strlen(frase);
	for(auxiliar = 0; auxiliar < contador - 1; auxiliar++)
	{
		if(frase[auxiliar] ==' ')
		{
			*(ponteiro + auxiliar) = frase[auxiliar] - 4;
			
		}
		else
		{
			*(ponteiro + auxiliar) = frase[auxiliar] - 63;
		}
	}
}
//Função para criptografar a mensagem
long long criptografar(long long int *pont, long long int n, long long int e, int contador1)
{
	int contador;
	for(contador = 0; contador < contador1 - 1; contador++)
	{
		*(pont + contador) = teoremadoresto(*(pont + contador),n,e);
	}
}
//Função contrária a anterior
long long descriptografar(long long int p,long long int q, long long int e, long long int frasenumerada[], char *frase, int contador)
{
	long long int auxiliar1, d, contador1, n;
	auxiliar1 = (p - 1) * (q - 1);
	n = p * q;
	d = inversoMod(auxiliar1,e);
	for(contador1 = 0; contador1 < contador; contador1++)
	{
		if(teoremadoresto(frasenumerada[contador1], n, d)==28)
		{
			*(frase + contador1)=28+4;
		}
		else
		{
			*(frase + contador1)=teoremadoresto(frasenumerada[contador1], n, d)+63;
		}
		
	}
}
//Função para criar o arquivo .txt contendo a chave publica
long long criararquivo(long long int chave, long long int e)
{
	FILE *chav;
	chav= fopen("chave.txt", "w");
	fprintf(chav,"A chave publica é :%lld %lld",chave, e );
	fclose(chav);
}
//Função para criar o arquivo .txt contendo o texto criptografado
long long criararquivocr(long long int chave[], long long int n,long long int e,int cont1)
{
	int cont;
	FILE *chav;
	chav= fopen("cripitografado.txt", "w");
	for(cont=0; cont<cont1-1; cont++)
	{
		fprintf(chav,"%lld ",chave[cont]);
	}
	fclose(chav);
}
//Função para criar o arquivo .txt contendo o texto descriptografado
long long criararquivodecr(char chave[])
{
	int cont;
	FILE *chav;
	chav= fopen("descriptografado.txt", "w");
	fprintf(chav,"O texto descripitografado e :%s", chave);
	fclose(chav);
}
int main()
{
	int contador, contador1, funcao, sair = 0;
	long long int p, q, e, n, frasen[10000]; char frase [10000];	
	while(1)
	{
		system("clear");
		system("tput reset");
		//printf("\e[H\e[2J");
		printf("---------------------------------------------------------------------------------------------------------------------\n");
		printf("---------------------------------------------------------------------------------------------------------------------\n");
		printf("--                                                      CRIPTOGRAFIA                                               --\n");
		printf("-                                                                                                                   -\n");
		printf("-                                                                                                                   -\n");
		printf("-                                                                                                                   -\n");
		printf("-                          ||||||||||||||              ||||||||||||||               ||||||||||||                    -\n");
		printf("-                          |||||    |||||              ||||||||||||||              |||||    |||||                   -\n");
		printf("-                          |||||    |||||              ||||||                      |||||    |||||                   -\n");
		printf("-                          |||||    |||||              ||||||                      |||||    |||||                   -\n");
		printf("-                          |||||    |||||              ||||||                      |||||    |||||                   -\n");
		printf("-                          |||||||||||||               ||||||||||||||              |||||    |||||                   -\n"); 
		printf("-                          |||||||||||                 ||||||||||||||              ||||||||||||||                   -\n"); 
		printf("-                          |||||   ||||                        ||||||              ||||||||||||||                   -\n"); 
		printf("-                          |||||    ||||                       ||||||              |||||    |||||                   -\n"); 
		printf("-                          |||||     ||||                      ||||||              |||||    |||||                   -\n"); 
		printf("-                          |||||      ||||             ||||||||||||||              |||||    |||||                   -\n"); 
		printf("-                          |||||       ||||            ||||||||||||||              |||||    |||||                   -\n"); 
		printf("-                                                                                                                   -\n");
		printf("-                                                                                                                   -\n");
		printf("-                                                                                                                   -\n");
		printf("-                                                                                                                   -\n");
		printf("--                     Arthur Padilha  José Júnior  Jamerson Mychael  Italo Oliveira  Carlos Eduardo               --\n");
		printf("---------------------------------------------------------------------------------------------------------------------\n");
		printf("---------------------------------------------------------------------------------------------------------------------\n\n\n\n");
		printf(" ---------------------------------------------------------------\n");
		printf("|  Este programa tem 3 funções, selecione o que deseja fazer:   |\n");
		printf("|  1 = gerar a chave pública  					|\n");
		printf("|  2 = criptografar a mensagem  				|\n");
		printf("|  3 = descriptografar a mensagem  				|\n");
		printf(" ---------------------------------------------------------------\n");
		printf("  Digite o número da função que deseja ultilizar: ");
		scanf("%d", &funcao);
		system("clear");
		system("tput reset");
		getchar();
		if(funcao == 1)
		{
			printf("  Digite os números primos p e q:");
			scanf("%lld%lld", &p, &q);
			if(p == q)
			{
				igual(&p, &q);
			}
			primo(p, &p);
			primo(q, &q);
			printf("  Agora digite o expoente que é relativamente primo a (p - 1)(q -1):");
			scanf("%lld", &e);
			verificar(e, p, q, &e);
			printf("  A chave pública da criptografia RSA é: %lld %lld", p*q, e);
			criararquivo(p*q,e);
			printf("  Caso deseje voltar ao menu, digite 1 e caso não, digite 0 para encerrar o programa: ");
			scanf("%d", &sair);
			if (sair == 1)
			{
				continue;
			}
			else
			{
				printf("  Obrigado e tenha um bom dia!\n");
				break;
			}			
		}
		if (funcao == 2)
		{
			printf("  Digite o texto a ser criptografado: ");
			fgets(frase, 4000, stdin);
			printf("\n  Digite a chave pública para criptografar:");
			scanf("%lld%lld", &n, &e);
			converte(frase, frasen);
			contador1 = strlen(frase);
			criptografar(frasen, n, e, contador1);
			printf("  ");
			for(contador = 0; contador < contador1 - 1; contador++)
			{
				printf("%lld ", frasen[contador]);
			}
			criararquivocr(frasen,n,e,contador1);
			printf("Caso deseje voltar ao menu, digite 1 e caso não, digite 0 para encerrar o programa: ");
			scanf("%d", &sair);
			if (sair == 1)
			{
				continue;
			}
			else
			{
				printf("Obrigado e tenha um bom dia!\n");
				break;
			}
			printf("\n");
		}
		if(funcao == 3)
		{
			printf("Digite os números primos p e q:");
			scanf("%lld%lld", &p, &q);
			if(p == q)
			{
				igual(&p, &q);
			}
			primo(p, &p);
			primo(q, &q);
			printf("Agora digite o expoente que é relativamente primo a (p - 1)(q -1):");
			scanf("%lld", &e);
			verificar(e, p, q, &e);
			FILE *chav;
			chav= fopen("cripitografado.txt", "r");
			contador = 0;
			while (!feof(chav))
			{
				fscanf(chav,"%lld", &frasen[contador]);
				contador++;

			}
			fclose(chav);
			descriptografar(p, q, e, frasen, frase, (contador - 1));
			printf("A frase descriptografada e: ");
			printf("%s\n", frase);
			criararquivodecr(frase);
			printf("Caso deseje voltar ao menu, digite 1 e caso não, digite 0 para encerrar o programa: ");
			scanf("%d", &sair);
			if (sair == 1)
			{
				continue;
			}
			else
			{
				printf("Obrigado e tenha um bom dia!\n");

				break;
			}
		}
	}
	return 0;
}
